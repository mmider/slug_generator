// ===================================================================================
// If you want to contribute:
// 1. Make sure the words really fits anywhere where it should. For instance,
//     when adding an adjective, try:
//     <adjective> black dog
//     big <adjective> dog
//     Does it sound too awkward?
// 2. Insert word into the most appropriate list.
//     When in doubt, search for synonyms, maybe they are already here.
//     If it still doesn't make sense, feel free to contact the package owner.
// 3. Keep lists sorted alphabetically.
// ===================================================================================

import 'package:slug_generator/src/data_containers.dart';

class WordsVault {
  static final adjectiveFirst = RawListOfWords.fromListOfStrings(
    maxLength: 13,
    data: const [
      'first',
      'new',
    ],
  );

  static final adjectiveNear = RawListOfWords.fromListOfStrings(
    comment:
        'Adjective that must be the nearest to the noun (color, material, etc.)',
    maxLength: 13,
    data: const [
      'almond',
      'amaranth',
      'amigurumi',
      'apricot',
      'artichoke',
      'auburn',
      'azure',
      'banana',
      'beige',
      'black',
      'blond',
      'blue',
      'brown',
      'burgundy',
      'carmine',
      'carrot',
      'celadon',
      'cerise',
      'cerulean',
      'charcoal',
      'cherry',
      'chestnut',
      'chocolate',
      'cinnamon',
      'copper',
      'cream',
      'crimson',
      'cyan',
      'daffodil',
      'dandelion',
      'denim',
      'ebony',
      'eggplant',
      'gray',
      'ginger',
      'green',
      'indigo',
      'infrared',
      'jasmine',
      'khaki',
      'lavender',
      'lilac',
      'mauve',
      'magenta',
      'mahogany',
      'maize',
      'marigold',
      'mustard',
      'ochre',
      'orange',
      'origami',
      'papaya',
      'paper',
      'peach',
      'persimmon',
      'pink',
      'pistachio',
      'pumpkin',
      'purple',
      'raspberry',
      'red',
      'rose',
      'russet',
      'saffron',
      'sage',
      'scarlet',
      'sepia',
      'silver',
      'tan',
      'tangerine',
      'taupe',
      'teal',
      'tomato',
      'turquoise',
      'tuscan',
      'ultramarine',
      'ultraviolet',
      'umber',
      'vanilla',
      'vermilion',
      'violet',
      'viridian',
      'white',
      'wine',
      'wisteria',
      'yellow',
      // Stone, metal, etc.
      'agate',
      'amber',
      'amethyst',
      'aquamarine',
      'asparagus',
      'beryl',
      'brass',
      'bronze',
      'clay',
      'cobalt',
      'coral',
      'cornflower',
      'diamond',
      'emerald',
      'garnet',
      'golden',
      'granite',
      'ivory',
      'jade',
      'jasper',
      'lemon',
      'lime',
      'malachite',
      'maroon',
      'myrtle',
      'nickel',
      'olive',
      'olivine',
      'onyx',
      'opal',
      'orchid',
      'pearl',
      'peridot',
      'platinum',
      'porcelain',
      'quartz',
      'ruby',
      'sandy',
      'sapphire',
      'steel',
      'thistle',
      'topaz',
      'tourmaline',
      'tungsten',
      'xanthic',
      'zircon',
    ],
  );

  static final adjective = RawListOfWords.fromListOfStrings(
    comment:
        "Adjectives that can be used anywhere (as a first adjective, second adjective, etc.)",
    maxLength: 13,
    data: const [
      // Appearance, sound, smell...
      'acrid',
      'ambrosial',
      'amorphous',
      'armored',
      'aromatic',
      'bald',
      'blazing',
      'boisterous',
      'bouncy',
      'brawny',
      'bulky',
      'camouflaged',
      'caped',
      'chubby',
      'curvy',
      'elastic',
      'ethereal',
      'fat',
      'feathered',
      'fiery',
      'flashy',
      'flat',
      'fluffy',
      'foamy',
      'fragrant',
      'furry',
      'fuzzy',
      'glaring',
      'hairy',
      'heavy',
      'hissing',
      'horned',
      'icy',
      'imaginary',
      'invisible',
      'lean',
      'loud',
      'loutish',
      'lumpy',
      'lush',
      'masked',
      'meaty',
      'messy',
      'misty',
      'nebulous',
      'noisy',
      'nondescript',
      'organic',
      'purring',
      'quiet',
      'quirky',
      'radiant',
      'roaring',
      'ruddy',
      'rustling',
      'screeching',
      'shaggy',
      'shapeless',
      'shiny',
      'silent',
      'silky',
      'singing',
      'skinny',
      'smooth',
      'soft',
      'spicy',
      'spiked',
      'statuesque',
      'sticky',
      'tacky',
      'tall',
      'tangible',
      'tentacled',
      'thick',
      'thundering',
      'venomous',
      'warm',
      'weightless',
      'whispering',
      'winged',
      'wooden',

      // Beauty & Charm
      'adorable',
      'affable',
      'amazing',
      'amiable',
      'attractive',
      'beautiful',
      'calm',
      'charming',
      'cherubic',
      'classic',
      'classy',
      'convivial',
      'cordial',
      'cuddly',
      'curly',
      'cute',
      'debonair',
      'elegant',
      'famous',
      'fresh',
      'friendly',
      'funny',
      'gorgeous',
      'graceful',
      'gregarious',
      'grinning',
      'handsome',
      'hilarious',
      'hot',
      'interesting',
      'kind',
      'laughing',
      'lovely',
      'meek',
      'mellow',
      'merciful',
      'neat',
      'nifty',
      'notorious',
      'poetic',
      'pretty',
      'refined',
      'refreshing',
      'sexy',
      'smiling',
      'sociable',
      'spiffy',
      'stylish',
      'sweet',
      'tactful',
      'whimsical',

      // Character & Emotions
      'abiding',
      'accurate',
      'adamant',
      'adaptable',
      'adventurous',
      'alluring',
      'aloof',
      'ambitious',
      'amusing',
      'annoying',
      'arrogant',
      'aspiring',
      'belligerent',
      'benign',
      'berserk',
      'benevolent',
      'bold',
      'brave',
      'cheerful',
      'chirpy',
      'cocky',
      'congenial',
      'courageous',
      'cryptic',
      'curious',
      'daft',
      'dainty',
      'daring',
      'defiant',
      'delicate',
      'delightful',
      'determined',
      'devout',
      'didactic',
      'diligent',
      'discreet',
      'dramatic',
      'dynamic',
      'eager',
      'eccentric',
      'elated',
      'encouraging',
      'enigmatic',
      'enthusiastic',
      'evasive',
      'faithful',
      'fair',
      'fanatic',
      'fearless',
      'fervent',
      'festive',
      'fierce',
      'fine',
      'free',
      'gabby',
      'garrulous',
      'gay',
      'gentle',
      'glistening',
      'greedy',
      'grumpy',
      'happy',
      'honest',
      'hopeful',
      'hospitable',
      'impetuous',
      'independent',
      'industrious',
      'innocent',
      'intrepid',
      'jolly',
      'jovial',
      'just',
      'lively',
      'loose',
      'loyal',
      'merry',
      'modest',
      'mysterious',
      'nice',
      'obedient',
      'optimistic',
      'orthodox',
      'outgoing',
      'outrageous',
      'overjoyed',
      'passionate',
      'perky',
      'placid',
      'polite',
      'positive',
      'proud',
      'prudent',
      'puzzling',
      'quixotic',
      'quizzical',
      'rebel',
      'resolute',
      'rampant',
      'righteous',
      'romantic',
      'rough',
      'rousing',
      'sassy',
      'satisfied',
      'sly',
      'sincere',
      'snobbish',
      'solemn',
      'spirited',
      'spry',
      'stalwart',
      'stirring',
      'swinging',
      'tasteful',
      'thankful',
      'tidy',
      'tremendous',
      'truthful',
      'unselfish',
      'upbeat',
      'uppish',
      'valiant',
      'vehement',
      'vengeful',
      'vigorous',
      'vivacious',
      'zealous',
      'zippy',

      // Intelligence & Abilities
      'able',
      'adept',
      'analytic',
      'astute',
      'attentive',
      'brainy',
      'busy',
      'calculating',
      'capable',
      'careful',
      'cautious',
      'certain',
      'clever',
      'competent',
      'conscious',
      'cooperative',
      'crafty',
      'crazy',
      'cunning',
      'daffy',
      'devious',
      'discerning',
      'efficient',
      'expert',
      'functional',
      'gifted',
      'helpful',
      'enlightened',
      'idealistic',
      'impartial',
      'industrious',
      'ingenious',
      'inquisitive',
      'intelligent',
      'inventive',
      'judicious',
      'keen',
      'knowing',
      'literate',
      'logical',
      'masterful',
      'mindful',
      'nonchalant',
      'observant',
      'omniscient',
      'poised',
      'practical',
      'pragmatic',
      'proficient',
      'provocative',
      'qualified',
      'radical',
      'rational',
      'realistic',
      'resourceful',
      'savvy',
      'sceptical',
      'sensible',
      'serious',
      'shrewd',
      'skilled',
      'slick',
      'slim',
      'sloppy',
      'smart',
      'sophisticated',
      'stoic',
      'subtle',
      'succinct',
      'talented',
      'thoughtful',
      'tricky',
      'unbiased',
      'uptight',
      'versatile',
      'versed',
      'visionary',
      'wise',
      'witty',

      // Strength & Agility
      'accelerated',
      'active',
      'agile',
      'athletic',
      'dashing',
      'deft',
      'dexterous',
      'energetic',
      'fast',
      'frisky',
      'hasty',
      'hypersonic',
      'meteoric',
      'mighty',
      'muscular',
      'nimble',
      'nippy',
      'powerful',
      'prompt',
      'quick',
      'rapid',
      'resilient',
      'robust',
      'rugged',
      'solid',
      'speedy',
      'steadfast',
      'steady',
      'strong',
      'sturdy',
      'tireless',
      'tough',
      'unyielding',

      // Money & Power
      'rich',
      'wealthy',

      // Science
      'meticulous',
      'precise',
      'rigorous',
      'scrupulous',
      'strict',

      // Movement type
      'airborne',
      'burrowing',
      'crouching',
      'flying',
      'hidden',
      'hopping',
      'jumping',
      'lurking',
      'tunneling',
      'warping',

      // Location and Dwelling
      'aboriginal',
      'amphibian',
      'aquatic',
      'arboreal',
      'polar',
      'terrestrial',
      'urban',

      // Awesome
      'accomplished',
      'astonishing',
      'authentic',
      'awesome',
      'delectable',
      'excellent',
      'exotic',
      'exuberant',
      'fabulous',
      'fantastic',
      'fascinating',
      'flawless',
      'fortunate',
      'funky',
      'godlike',
      'glorious',
      'groovy',
      'honored',
      'illustrious',
      'imposing',
      'important',
      'impressive',
      'incredible',
      'invaluable',
      'kickass',
      'majestic',
      'magnificent',
      'marvellous',
      'monumental',
      'perfect',
      'phenomenal',
      'pompous',
      'precious',
      'premium',
      'private',
      'remarkable',
      'spectacular',
      'splendid',
      'successful',
      'wonderful',
      'wondrous',

      // Original
      'offbeat',
      'original',
      'outstanding',
      'quaint',
      'unique',

      // Time
      'ancient',
      'antique',
      'prehistoric',
      'primitive',

      // Misc
      'abstract',
      'acoustic',
      'angelic',
      'arcane',
      'archetypal',
      'augmented',
      'auspicious',
      'axiomatic',
      'beneficial',
      'bipedal',
      'bizarre',
      'complex',
      'dancing',
      'dangerous',
      'demonic',
      'divergent',
      'economic',
      'electric',
      'elite',
      'eminent',
      'enchanted',
      'esoteric',
      'finicky',
      'fractal',
      'futuristic',
      'gainful',
      'hallowed',
      'heavenly',
      'heretic',
      'holistic',
      'hungry',
      'hypnotic',
      'hysterical',
      'illegal',
      'imperial',
      'imported',
      'impossible',
      'inescapable',
      'juicy',
      'liberal',
      'ludicrous',
      'lyrical',
      'magnetic',
      'manipulative',
      'mature',
      'military',
      'macho',
      'married',
      'melodic',
      'natural',
      'naughty',
      'nocturnal',
      'nostalgic',
      'optimal',
      'pastoral',
      'peculiar',
      'piquant',
      'pristine',
      'prophetic',
      'psychedelic',
      'quantum',
      'rare',
      'real',
      'secret',
      'simple',
      'spectral',
      'spiritual',
      'stereotyped',
      'stimulating',
      'straight',
      'strange',
      'tested',
      'therapeutic',
      'true',
      'ubiquitous',
      'uncovered',
      'unnatural',
      'utopian',
      'vagabond',
      'vague',
      'vegan',
      'victorious',
      'vigilant',
      'voracious',
      'wakeful',
      'wandering',
      'watchful',
      'wild',

      // Pseudo-colors
      'bright',
      'brilliant',
      'colorful',
      'crystal',
      'dark',
      'dazzling',
      'fluorescent',
      'glittering',
      'glossy',
      'gleaming',
      'light',
      'mottled',
      'neon',
      'opalescent',
      'pastel',
      'smoky',
      'sparkling',
      'spotted',
      'striped',
      'translucent',
      'transparent',
      'vivid',
    ],
  );

  static final animalBreed = RawListOfWords.fromListOfStrings(
    comment: "Domestic animal breeds",
    maxLength: 13,
    data: const [
      // Dogs
      'beagle',
      'bloodhound',
      'bulldog',
      'bullmastiff',
      'chihuahua',
      'chowchow',
      'collie',
      'corgi',
      'dalmatian',
      'dachshund',
      'doberman',
      'foxhound',
      'husky',
      'labradoodle',
      'labrador',
      'mastiff',
      'malamute',
      'mongrel',
      'poodle',
      'pug',
      'rottweiler',
      'saluki',
      'spaniel',
      'terrier',
      'whippet',

      // Horses & Hybrids
      'mule',
      'mustang',
      'pony',
    ],
  );

  // ==============================================================================
  // We specify only a few most memorable ones, not diving too deep into mythology.
  // If you want to contribute:
  // 1. Please do not include human-like species (centaur, werewolf, etc.).
  // 2. Make sure word gets 1M+ Google hits.
  // 3. Follow general rules above
  // ==============================================================================
  static final animalFantasy = RawListOfWords.fromListOfStrings(
    comment: "Fantasy creatures",
    maxLength: 13,
    data: const [
      'basilisk',
      'chupacabra',
      'dragon',
      'griffin',
      'pegasus',
      'unicorn',
    ],
  );

  // ========================================================
  // Animals are grouped by scientific classification
  // (typically by Class -> Order, but it may vary).
  // ========================================================
  static final animal = RawListOfWords.fromListOfStrings(
    comment:
        "Wild animals (in the widest sense of the word 'animal') + some generic terms for domestic animals.",
    maxLength: 13,
    data: const [
      // Annelida
      'earthworm',
      'leech',
      'worm',

      // Arthropoda -> Arachnomorpha
      'scorpion',
      'spider',
      'tarantula',

      // Arthropoda -> Crustacea
      'barnacle',
      'crab',
      'crayfish',
      'lobster',
      'pillbug',
      'prawn',
      'shrimp',

      // Arthropoda -> Insecta
      'ant',
      'bee',
      'beetle',
      'bug',
      'bumblebee',
      'butterfly',
      'caterpillar',
      'cicada',
      'cricket',
      'dragonfly',
      'earwig',
      'firefly',
      'grasshopper',
      'honeybee',
      'hornet',
      'inchworm',
      'ladybug',
      'locust',
      'mantis',
      'mayfly',
      'mosquito',
      'moth',
      'sawfly',
      'silkworm',
      'termite',
      'wasp',
      'woodlouse',

      // Arthropoda -> Myriapoda
      'centipede',
      'millipede',

      // Artiodactyla -> Antilocapridae
      'pronghorn',

      // Artiodactyla -> Bovidae
      'antelope',
      'bison',
      'buffalo',
      'bull',
      'chamois',
      'cow',
      'gazelle',
      'gaur',
      'goat',
      'ibex',
      'impala',
      'kudu',
      'markhor',
      'mouflon',
      'muskox',
      'nyala',
      'oryx',
      'sheep',
      'wildebeest',
      'yak',
      'zebu',

      // Artiodactyla -> Camelidae
      'alpaca',
      'camel',
      'llama',
      'vicugna',

      // Artiodactyla -> Cervidae
      'caribou',
      'chital',
      'deer',
      'elk',
      'moose',
      'pudu',
      'reindeer',
      'sambar',
      'wapiti',

      // Artiodactyla -> Cetacea
      'beluga',
      'dolphin',
      'narwhal',
      'orca',
      'porpoise',
      'whale',

      // Artiodactyla -> Equidae
      'donkey',
      'horse',
      'stallion',
      'zebra',

      // Artiodactyla-> Giraffidae
      'giraffe',
      'okapi',

      // Artiodactyla-> Hippopotamidae
      'hippo',

      // Artiodactyla -> Rhinocerotidae
      'rhino',

      // Artiodactyla -> Suidae
      'boar',
      'hog',
      'pig',
      'swine',
      'warthog',

      // Artiodactyla -> Tayassuidae
      'peccary',

      // Aves -> Accipitriformes
      'buzzard',
      'eagle',
      'goshawk',
      'harrier',
      'hawk',
      'vulture',

      // Aves -> Anseriformes
      'duck',
      'goose',
      'swan',
      'teal',

      // Aves
      'bird',

      // Aves -> Apodiformes
      'hummingbird',
      'swift',

      // Aves -> Apterygiformes
      'kiwi',

      // Aves -> Ardeidae
      'bittern',

      // Aves -> Caprimulgiformes
      'potoo',

      // Aves -> Cariamiformes
      'seriema',

      // Aves -> Casuariiformes
      'cassowary',
      'emu',

      // Aves -> Cathartiformes
      'condor',

      // Aves -> Charadriiformes
      'auk',
      'avocet',
      'guillemot',
      'kittiwake',
      'puffin',
      'seagull',
      'skua',

      // Aves -> Ciconiiformes
      'stork',

      // Aves -> Columbiformes
      'dodo',
      'dove',
      'pigeon',

      // Aves -> Coraciiformes
      'kingfisher',
      'tody',

      // Aves -> Cuculiformes
      'bustard',
      'coua',
      'coucal',
      'cuckoo',
      'koel',
      'malkoha',
      'roadrunner',

      // Aves -> Eurypygiformes
      'kagu',

      // Aves -> Falconiformes
      'caracara',
      'falcon',
      'kestrel',

      // Aves -> Galliformes
      'chachalaca',
      'chicken',
      'curassow',
      'grouse',
      'guan',
      'junglefowl',
      'partridge',
      'peacock',
      'pheasant',
      'quail',
      'rooster',
      'turkey',

      // Aves -> Gaviiformes
      'loon',

      // Aves -> Gruiformes
      'coot',
      'crane',

      // Aves -> Musophagiformes
      'turaco',

      // Aves -> Opisthocomiformes
      'hoatzin',

      // Aves -> Passeriformes
      'bullfinch',
      'crow',
      'jackdaw',
      'jaybird',
      'finch',
      'lyrebird',
      'magpie',
      'myna',
      'nightingale',
      'nuthatch',
      'oriole',
      'oxpecker',
      'raven',
      'robin',
      'rook',
      'skylark',
      'sparrow',
      'starling',
      'swallow',
      'waxbill',
      'wren',

      // Aves -> Pelecaniformes
      'heron',
      'ibis',

      // Aves -> Piciformes
      'jacamar',
      'piculet',
      'toucan',
      'toucanet',
      'woodpecker',

      // Aves -> Phoenicopteriformes
      'flamingo',

      // Aves -> Podicipediformes
      'grebe',

      // Aves -> Procellariiformes
      'albatross',
      'fulmar',
      'petrel',
      'spoonbill',

      // Aves -> Psittaciformes
      'ara',
      'cockatoo',
      'kakapo',
      'lorikeet',
      'macaw',
      'parakeet',
      'parrot',

      // Aves -> Sphenisciformes
      'penguin',

      // Aves -> Struthionidae
      'ostrich',

      // Aves -> Strigiformes
      'boobook',
      'owl',

      // Aves -> Suliformes
      'booby',
      'cormorant',
      'frigatebird',
      'pelican',

      // Aves -> Trogoniformes
      'quetzal',
      'trogon',

      // Chordata -> Amphibia
      'axolotl',
      'bullfrog',
      'frog',
      'newt',
      'salamander',
      'toad',

      // Chordata -> Actinopterygii
      'angelfish',
      'barracuda',
      'carp',
      'catfish',
      'dogfish',
      'goldfish',
      'guppy',
      'eel',
      'flounder',
      'herring',
      'lionfish',
      'mackerel',
      'oarfish',
      'perch',
      'salmon',
      'seahorse',
      'sturgeon',
      'sunfish',
      'tench',
      'trout',
      'tuna',
      'wrasse',

      // Chordata -> Chondrichthyes
      'sawfish',
      'shark',
      'stingray',

      // Cnidaria -> Medusozoa
      'jellyfish',

      // Crocodilia
      'alligator',
      'caiman',
      'crocodile',
      'gharial',

      // Echinodermata -> Asterozoa
      'starfish',

      // Echinodermata -> Echinoidea
      'urchin',

      // Erinaceomorpha -> Erinaceidae
      'hedgehog',

      // Mammalia -> Carnivora -> Canidae
      'coyote',
      'dingo',
      'dog',
      'fennec',
      'fox',
      'hound',
      'jackal',
      'tanuki',
      'wolf',

      // Mammalia -> Carnivora -> Felidae
      'bobcat',
      'caracal',
      'cat',
      'cougar',
      'jaguar',
      'jaguarundi',
      'leopard',
      'lion',
      'lynx',
      'manul',
      'ocelot',
      'panther',
      'puma',
      'serval',
      'smilodon',
      'tiger',
      'wildcat',

      // Mammalia -> Carnivora -> Feliformia
      'aardwolf',
      'binturong',
      'cheetah',
      'civet',
      'fossa',
      'hyena',
      'meerkat',
      'mongoose',

      // Mammalia -> Carnivora -> Musteloidea
      'badger',
      'coati',
      'ermine',
      'ferret',
      'marten',
      'mink',
      'otter',
      'polecat',
      'skunk',
      'stoat',
      'weasel',
      'wolverine',

      // Mammalia -> Carnivora -> Pinnipedia
      'seal',
      'walrus',

      // Mammalia -> Carnivora -> Procyonidae
      'raccoon',
      'ringtail',

      // Mammalia -> Carnivora -> Ursidae
      'bear',
      'panda',

      // Mammalia -> Chiroptera
      'bat',

      // Mammalia -> Cingulata
      'armadillo',

      // Mammalia -> Elephantidae
      'elephant',
      'mammoth',
      // not actually belongs here...
      'mastodon',

      // Mammalia -> Eutheria
      'mole',

      // Mammalia -> Hyracoidea
      'hyrax',

      // Mammalia -> Marsupialia
      'bandicoot',
      'bettong',
      'cuscus',
      'kangaroo',
      'koala',
      'numbat',
      'quokka',
      'quoll',
      'wallaby',
      'wombat',

      // Mammalia -> Monotremata
      'echidna',
      'platypus',

      // Mammalia -> Perissodactyla
      'tapir',

      // Mammalia -> Pilosa
      'anteater',
      'sloth',

      // Mammalia -> Rodenta
      'agouti',
      'beaver',
      'capybara',
      'chinchilla',
      'chipmunk',
      'degu',
      'dormouse',
      'gerbil',
      'gopher',
      'groundhog',
      'jackrabbit',
      'jerboa',
      'hamster',
      'hare',
      'lemming',
      'marmot',
      'mouse',
      'muskrat',
      'porcupine',
      'rabbit',
      'rat',
      'squirrel',
      'vole',

      // Mammalia -> Primates
      'ape',
      'baboon',
      'bonobo',
      'capuchin',
      'chimpanzee',
      'galago',
      'gibbon',
      'gorilla',
      'lemur',
      'lori',
      'macaque',
      'mandrill',
      'marmoset',
      'monkey',
      'orangutan',
      'tamarin',
      'tarsier',
      'uakari',

      // Mammalia -> Sirenia
      'dugong',
      'manatee',

      // Mammalia -> Soricomorpha
      'shrew',

      // Mammalia -> Tubulidentata
      'aardwark',

      // Mollusca -> Bivalvia
      'clam',
      'cockle',
      'mussel',
      'oyster',
      'scallop',
      'shellfish',

      // Mollusca -> Cephalopoda
      'ammonite',
      'cuttlefish',
      'nautilus',
      'octopus',
      'squid',

      // Mollusca -> Gastropoda
      'limpet',
      'slug',
      'snail',

      // Porifera
      'sponge',

      // Rhynchocephalia
      'tuatara',

      // Squamata
      'agama',
      'chameleon',
      'dragon',
      'gecko',
      'iguana',
      'lizard',
      'pogona',
      'skink',

      // Squamata -> Serpentes
      'adder',
      'anaconda',
      'asp',
      'boa',
      'cobra',
      'copperhead',
      'mamba',
      'python',
      'rattlesnake',
      'sidewinder',
      'snake',
      'taipan',
      'viper',

      // Testudines
      'tortoise',
      'turtle',

      // Dinosaurs
      'dinosaur',
      'raptor',

      // Not quite animals
      'mushroom',
    ],
  );

  static final fromNounNoMod = RawListOfWords.fromListOfStrings(
    comment: "Nouns that can be used after the 'from' without an adjective",
    data: const [
      // Planets & moons
      'venus',
      'mars',
      'jupiter',
      'ganymede',
      'saturn',
      'uranus',
      'neptune',
      'pluto',

      // Stars
      'betelgeuse',
      'sirius',
      'vega',

      // Fictional places
      'arcadia',
      'asgard',
      'atlantis',
      'avalon',
      'camelot',
      'eldorado',
      'heaven',
      'hell',
      'hyperborea',
      'lemuria',
      'nibiru',
      'shambhala',
      'tartarus',
      'valhalla',
      'wonderland',
    ],
  );

  static final nounAdjective = RawListOfWords.fromListOfStrings(
    comment: "Words that can be used anywhere as adjectives or of-nouns.",
    examples: const [
      "<magic> black dog",
      "big <magic> dog",
      "big dog of <magic>",
    ],
    maxLength: 13,
    data: const [
      'fancy',
      'magic',
      'rainbow',
      'woodoo',
    ],
  );

  // ==============================================
  // If you want to contribute, check that the word
  // makes sense in following phrases:
  //     black dog of <adjective> faith
  //     black dog of <adjective> perfection
  //     black dog of <adjective> storm
  //     black dog of <adjective> coffee
  // ==============================================
  static final ofModifier = RawListOfWords.fromListOfStrings(
    comment: "Adjective for 'of-noun'",
    maxLength: 13,
    examples: const ["black dog of <ultimate> achievement"],
    data: const [
      'absolute',
      'abstract',
      'algebraic',
      'amazing',
      'amusing',
      'ancient',
      'angelic',
      'astonishing',
      'authentic',
      'awesome',
      'beautiful',
      'classic',
      'delightful',
      'demonic',
      'eminent',
      'enjoyable',
      'eternal',
      'excellent',
      'exotic',
      'extreme',
      'fabulous',
      'famous',
      'fantastic',
      'fascinating',
      'flawless',
      'fortunate',
      'glorious',
      'great',
      'heavenly',
      'holistic',
      'hypothetical',
      'ideal',
      'illegal',
      'imaginary',
      'immense',
      'imminent',
      'immortal',
      'impossible',
      'impressive',
      'improbable',
      'incredible',
      'inescapable',
      'inevitable',
      'infinite',
      'inspiring',
      'interesting',
      'legal',
      'magic',
      'majestic',
      'major',
      'marvelous',
      'massive',
      'mysterious',
      'nonconcrete',
      'nonstop',
      'luxurious',
      'optimal',
      'original',
      'pastoral',
      'perfect',
      'perpetual',
      'phenomenal',
      'pleasurable',
      'pragmatic',
      'premium',
      'radical',
      'rampant',
      'regular',
      'remarkable',
      'satisfying',
      'serious',
      'scientific',
      'sexy',
      'sheer',
      'simple',
      'silent',
      'spectacular',
      'splendid',
      'stereotyped',
      'stimulating',
      'strange',
      'striking',
      'strongest',
      'sublime',
      'subtle',
      'sudden',
      'terrific',
      'therapeutic',
      'total',
      'ultimate',
      'uncanny',
      'undeniable',
      'unearthly',
      'unexpected',
      'unknown',
      'unmatched',
      'unnatural',
      'unreal',
      'unusual',
      'utter',
      'weird',
      'wonderful',
      'wondrous',
    ],
  );

  static final ofNounNoMod = RawListOfWords.fromListOfStrings(
    comment: "'of-nouns' which are used without modifiers.",
    maxLength: 13,
    examples: const ["big dog of <emphasis>"],
    data: const [
      // Science
      'chemistry',
      'education',
      'experiment',
      'mathematics',
      'psychology',
      'reading',

      // Art
      'cubism',
      'painting',

      // Misc
      'advertising',
      'agreement',
      'climate',
      'competition',
      'effort',
      'emphasis',
      'foundation',
      'judgment',
      'memory',
      'opportunity',
      'perspective',
      'priority',
      'promise',
      'teaching',
    ],
  );

  static final ofNoun = RawListOfWords.fromListOfStrings(
    comment: "Nouns that can be used in the end after the 'of'.",
    maxLength: 13,
    examples: const ["big dog of <bliss>"],
    data: const [
      // Emotions & Happiness
      'anger',
      'bliss',
      'contentment',
      'courage',
      'ecstasy',
      'excitement',
      'faith',
      'felicity',
      'fury',
      'gaiety',
      'glee',
      'glory',
      'greatness',
      'inspiration',
      'jest',
      'joy',
      'happiness',
      'holiness',
      'love',
      'merriment',
      'passion',
      'patience',
      'peace',
      'persistence',
      'pleasure',
      'pride',
      'recreation',
      'relaxation',
      'romance',
      'serenity',
      'tranquility',

      // Abstract Concepts
      'apotheosis',
      'chaos',
      'energy',
      'essence',
      'eternity',
      'excellence',
      'experience',
      'freedom',
      'nirvana',
      'order',
      'perfection',
      'spirit',
      'variation',

      // Social
      'acceptance',
      'brotherhood',
      'criticism',
      'culture',
      'discourse',
      'discussion',
      'justice',
      'piety',
      'respect',
      'security',
      'support',
      'tolerance',
      'trust',
      'warranty',

      // Money & Power
      'abundance',
      'admiration',
      'assurance',
      'authority',
      'awe',
      'certainty',
      'control',
      'domination',
      'enterprise',
      'fame',
      'grandeur',
      'influence',
      'luxury',
      'management',
      'opposition',
      'plenty',
      'popularity',
      'prestige',
      'prosperity',
      'reputation',
      'reverence',
      'reward',
      'superiority',
      'triumph',
      'wealth',

      // Intelligence and Abilities
      'acumen',
      'aptitude',
      'art',
      'artistry',
      'competence',
      'efficiency',
      'expertise',
      'finesse',
      'genius',
      'leadership',
      'perception',
      'skill',
      'virtuosity',

      // Conversation
      'argument',
      'debate',

      // Strength
      'action',
      'agility',
      'amplitude',
      'attack',
      'charisma',
      'chivalry',
      'defense',
      'defiance',
      'devotion',
      'dignity',
      'endurance',
      'exercise',
      'force',
      'fortitude',
      'gallantry',
      'health',
      'honor',
      'infinity',
      'inquire',
      'intensity',
      'luck',
      'mastery',
      'might',
      'opportunity',
      'penetration',
      'performance',
      'pluck',
      'potency',
      'protection',
      'prowess',
      'resistance',
      'serendipity',
      'speed',
      'stamina',
      'strength',
      'swiftness',
      'temperance',
      'tenacity',
      'valor',
      'vigor',
      'vitality',
      'will',

      // Progress
      'advance',
      'conversion',
      'correction',
      'development',
      'diversity',
      'elevation',
      'enhancement',
      'enrichment',
      'enthusiasm',
      'focus',
      'fruition',
      'growth',
      'improvement',
      'innovation',
      'modernism',
      'novelty',
      'proficiency',
      'progress',
      'promotion',
      'realization',
      'refinement',
      'renovation',
      'revolution',
      'success',
      'tempering',
      'upgrade',

      // Completion
      'ampleness',
      'completion',
      'satiation',
      'saturation',
      'sufficiency',
      'vastness',
      'wholeness',

      // Charm & Beauty
      'attraction',
      'beauty',
      'bloom',
      'cleaning',
      'courtesy',
      'glamour',
      'elegance',
      'fascination',
      'kindness',
      'joviality',
      'politeness',
      'refinement',
      'symmetry',
      'sympathy',
      'tact',

      // Science & art
      'calibration',
      'drama',
      'economy',
      'engineering',
      'examination',
      'philosophy',
      'poetry',
      'research',
      'science',

      // Politics (and this is as far as we want to go)
      'democracy',
      'election',
      'feminism',

      // Pleasurable things
      'champagne',
      'coffee',
      'cookies',
      'flowers',
      'fragrance',
      'honeydew',
      'music',
      'pizza',

      // Weather & sky
      'aurora',
      'blizzard',
      'current',
      'dew',
      'downpour',
      'drizzle',
      'hail',
      'hurricane',
      'lightning',
      'rain',
      'snow',
      'storm',
      'sunshine',
      'tempest',
      'thunder',
      'tornado',
      'typhoon',
      'weather',
      'wind',
      'whirlwind',

      // Misc
      'abracadabra',
      'adventure',
      'atheism',
      'camouflage',
      'destiny',
      'endeavor',
      'expression',
      'fantasy',
      'fertility',
      'imagination',
      'karma',
      'masquerade',
      'maturity',
      'radiance',
      'shopping',
      'sorcery',
      'unity',
      'witchcraft',
      'wizardry',
      'wonder',
      'youth',

      // Participles
      'purring',
    ],
  );

  static final prefix = RawListOfWords.fromListOfStrings(
    comment: "Words that can be used only immediately before the main subject",
    maxLength: 13,
    data: const [
      // Metric prefixes & other size-related prefixes
      'giga',
      'mega',
      'micro',
      'mini',
      'nano',
      'pygmy',

      // Superiority prefixes
      'super',
      'uber',
      'ultra',

      // Misc modifiers
      'cyber',
      'mutant',
      'ninja',
      'space',
    ],
  );

  static final size = RawListOfWords.fromListOfStrings(
    comment: "Adjectives related to physical size",
    maxLength: 13,
    data: const [
      'big',
      'colossal',
      'enormous',
      'gigantic',
      'great',
      'huge',
      'hulking',
      'humongous',
      'large',
      'little',
      'massive',
      'miniature',
      'petite',
      'portable',
      'small',
      'tiny',
      'towering',
    ],
  );

  // =============================================================================
  // NOTE: don't include phrases that can be generated via regular adjective-noun,
  // such as "golden eagle".
  // =============================================================================
  static final subj2 = RawListOfWords(
    comment: "Two-word animals",
    maxLength: 22,
    data: const [
      // Birds
      TwoWordTerm('atlantic', 'puffin'),
      TwoWordTerm('bank', 'swallow'),
      TwoWordTerm('barn', 'owl'),
      TwoWordTerm('barn', 'swallow'),
      TwoWordTerm('barred', 'owl'),
      TwoWordTerm('chimney', 'swift'),
      TwoWordTerm('cliff', 'swallow'),
      TwoWordTerm('eagle', 'owl'),
      TwoWordTerm('emperor', 'goose'),
      TwoWordTerm('fishing', 'owl'),
      TwoWordTerm('harlequin', 'duck'),
      TwoWordTerm('himalayan', 'snowcock'),
      TwoWordTerm('hyacinth', 'macaw'),
      TwoWordTerm('mangrove', 'cuckoo'),
      TwoWordTerm('mute', 'swan'),
      TwoWordTerm('northern', 'cardinal'),
      TwoWordTerm('peregrine', 'falcon'),
      TwoWordTerm('prairie', 'falcon'),
      TwoWordTerm('red', 'cardinal'),
      TwoWordTerm('snow', 'goose'),
      TwoWordTerm('snowy', 'owl'),
      TwoWordTerm('stygian', 'owl'),
      TwoWordTerm('tawny', 'owl'),
      TwoWordTerm('trumpeter', 'swan'),
      TwoWordTerm('tufted', 'puffin'),
      TwoWordTerm('whooper', 'swan'),
      TwoWordTerm('whooping', 'crane'),

      // Insects
      TwoWordTerm('fire', 'ant'),

      // Dog breeds
      TwoWordTerm('akita', 'inu'),
      TwoWordTerm('belgian', 'shepherd'),
      TwoWordTerm('boxer', 'dog'),
      TwoWordTerm('cane', 'corso'),
      TwoWordTerm('great', 'dane'),
      TwoWordTerm('hulky', 'dog'),
      TwoWordTerm('newfoundland', 'dog'),
      TwoWordTerm('pomeranian', 'dog'),
      TwoWordTerm('samoyed', 'dog'),
      TwoWordTerm('shepherd', 'dog'),
      TwoWordTerm('shiba', 'inu'),

      // Cat breeds
      TwoWordTerm('abyssinian', 'cat'),
      TwoWordTerm('birman', 'cat'),
      TwoWordTerm('chartreux', 'cat'),
      TwoWordTerm('korat', 'cat'),
      TwoWordTerm('manx', 'cat'),
      TwoWordTerm('munchkin', 'cat'),
      TwoWordTerm('persian', 'cat'),
      TwoWordTerm('pixiebob', 'cat'),
      TwoWordTerm('ragdoll', 'cat'),
      TwoWordTerm('ragamuffin', 'cat'),
      TwoWordTerm('savannah', 'cat'),
      TwoWordTerm('sphynx', 'cat'),

      // Domestic cattle (to keep it simple, we just copypaste bull+cow+calf here)
      TwoWordTerm('braford', 'cow'),
      TwoWordTerm('braford', 'bull'),
      TwoWordTerm('braford', 'calf'),
      TwoWordTerm('brahman', 'cow'),
      TwoWordTerm('brahman', 'bull'),
      TwoWordTerm('brahman', 'calf'),
      TwoWordTerm('gyr', 'cow'),
      TwoWordTerm('gyr', 'bull'),
      TwoWordTerm('gyr', 'calf'),
      TwoWordTerm('highland', 'cow'),
      TwoWordTerm('highland', 'bull'),
      TwoWordTerm('highland', 'calf'),
      TwoWordTerm('jersey', 'cow'),
      TwoWordTerm('jersey', 'bull'),
      TwoWordTerm('jersey', 'calf'),
      TwoWordTerm('kangayam', 'cow'),
      TwoWordTerm('kangayam', 'bull'),
      TwoWordTerm('kangayam', 'calf'),
      TwoWordTerm('longhorn', 'cow'),
      TwoWordTerm('longhorn', 'bull'),
      TwoWordTerm('longhorn', 'calf'),

      // Rabbit breeds
      TwoWordTerm('angora', 'rabbit'),
      TwoWordTerm('chinchilla', 'rabbit'),
      TwoWordTerm('harlequin', 'rabbit'),

      // Mammals (wild)
      TwoWordTerm('alpine', 'chipmunk'),
      TwoWordTerm('beaked', 'whale'),
      TwoWordTerm('bottlenose', 'dolphin'),
      TwoWordTerm('clouded', 'leopard'),
      TwoWordTerm('eared', 'seal'),
      TwoWordTerm('elephant', 'seal'),
      TwoWordTerm('feral', 'cat'),
      TwoWordTerm('feral', 'dog'),
      TwoWordTerm('feral', 'donkey'),
      TwoWordTerm('feral', 'goat'),
      TwoWordTerm('feral', 'horse'),
      TwoWordTerm('feral', 'pig'),
      TwoWordTerm('fur', 'seal'),
      TwoWordTerm('grizzly', 'bear'),
      TwoWordTerm('harbor', 'porpoise'),
      TwoWordTerm('honey', 'badger'),
      TwoWordTerm('humpback', 'whale'),
      TwoWordTerm('killer', 'whale'),
      TwoWordTerm('mountain', 'deer'),
      TwoWordTerm('mountain', 'goat'),
      TwoWordTerm('mountain', 'lion'),
      TwoWordTerm('olympic', 'marmot'),
      TwoWordTerm('pampas', 'deer'),
      TwoWordTerm('pine', 'marten'),
      TwoWordTerm('polynesian', 'rat'),
      TwoWordTerm('rhesus', 'macaque'),
      TwoWordTerm('river', 'dolphin'),
      TwoWordTerm('sea', 'lion'),
      TwoWordTerm('sea', 'otter'),
      TwoWordTerm('snow', 'leopard'),
      TwoWordTerm('sperm', 'whale'),
      TwoWordTerm('spinner', 'dolphin'),
      TwoWordTerm('vampire', 'bat'),

      // Reptiles
      TwoWordTerm('gila', 'monster'),
      TwoWordTerm('freshwater', 'crocodile'),
      TwoWordTerm('saltwater', 'crocodile'),
      TwoWordTerm('snapping', 'turtle'),

      // Fictional
      TwoWordTerm('walking', 'mushroom'),
    ],
  );

  static final from2 = RawListOfWords(
    comment: "Two-word phrases to use after 'from'",
    maxLength: 24,
    data: const [
      // Small places
      TwoWordTerm('fancy', 'cafe'),
      TwoWordTerm('prestigious', 'college'),
      TwoWordTerm('prestigious', 'university'),

      // Big places
      TwoWordTerm('big', 'city'),
      TwoWordTerm('foreign', 'country'),
      TwoWordTerm('small', 'town'),
      TwoWordTerm('wild', 'west'),

      // Weird places
      TwoWordTerm('ancient', 'ruins'),
      TwoWordTerm('another', 'dimension'),
      TwoWordTerm('another', 'planet'),
      TwoWordTerm('flying', 'circus'),
      TwoWordTerm('secret', 'laboratory'),
      TwoWordTerm('the', 'government'),
      TwoWordTerm('the', 'future'),
      TwoWordTerm('the', 'past'),
      TwoWordTerm('the', 'stars'),
    ],
  );
}
